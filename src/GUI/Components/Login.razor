@using Serilog;

@inject NavigationManager NavigationManager
@inject BusinessLogic.Services.IUserService UserService

<Modal @ref="@loginModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Вход</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Validations @ref="@loginValidations" ValidateOnLoad=false>
                <Validation @ref="@nameValidation" Validator="ValidateName">
                    <Field>
                        <TextEdit @bind-Text="@loginRequest.Name" Placeholder="Имя пользователя">
                           <Feedback>
                                <ValidationNone></ValidationNone>
                                <ValidationSuccess></ValidationSuccess>
                                <ValidationError>@nameErrMsg</ValidationError>
                            </Feedback>
                        </TextEdit>
                    </Field>
                </Validation>
                <Validation @ref="@passwordValidation" Validator="ValidatePassword">
                    <Field>
                        <TextEdit @bind-Text="@loginRequest.Password" Placeholder="Пароль"
                                  Role="TextRole.Password">
                           <Feedback>
                                <ValidationNone></ValidationNone>
                                <ValidationSuccess></ValidationSuccess>
                                <ValidationError>@passwordErrMsg</ValidationError>
                            </Feedback>
                        </TextEdit>
                    </Field>
                </Validation>
            </Validations>
            <Button Color="Color.Primary" Clicked="@OnLoginClicked" Block>Вход</Button>
        </ModalBody>
    </ModalContent>
</Modal>

@code {
    private Modal? loginModal;

    LoginRequest loginRequest = new LoginRequest();

    Validations? loginValidations;

    Validation? nameValidation;
    bool rightName = true;
    string nameErrMsg = "";

    Validation? passwordValidation;
    bool rightPassword = true;
    string passwordErrMsg = "";

    public void Show()
    {
        Log.Information("Show LoginModal");
        loginModal?.Show();
    }

    async Task OnLoginClicked()
    {
        Log.Information("Login btn clicked");
        if ( await loginValidations.ValidateAll() )
        {
            try
            {
                Log.Debug("Call UserService.Login");
                UserService.Login(loginRequest);
                NavigationManager.NavigateTo(NavigationManager.Uri, true);
                await loginValidations.ClearAll();
            }
            catch(NotExistsUserException ex)
            {
                Log.Error("Catch exception {0}", ex.GetType());
                rightName = false;
                await loginValidations.ValidateAll();
            }
            catch(IncorrectUserPasswordException ex)
            {
                Log.Error("Catch exception {0}", ex.GetType());
                rightPassword = false;
                await loginValidations.ValidateAll();
            }
        }
    }

    void ValidateName(ValidatorEventArgs e)
    {
        Log.Information("ValidateName is called");

        if (!rightName)
        {
            Log.Information("There is not user");
            e.Status = ValidationStatus.Error;
            nameErrMsg = "Пользователя с таким именем не существует";
            rightName = true;
        }
        else
        {
            var name = Convert.ToString(e.Value);

            if (string.IsNullOrEmpty(name))
            {
                Log.Information("Empty name field");
                e.Status = ValidationStatus.Error;
                nameErrMsg = "Введите имя пользователя";
                Log.Debug("Validate name error");
            }
            else
            {
                e.Status = ValidationStatus.Success;
                Log.Debug("Validate name success");
            }
        }
    }

    void ValidatePassword(ValidatorEventArgs e)
    {
        Log.Information("ValidateName is called");
        if (!rightPassword)
        {
            Log.Information("Wrong password");
            e.Status = ValidationStatus.Error;
            passwordErrMsg = "Неверный пароль";
            rightPassword = true;
        }
        else
        {
            var password = Convert.ToString(e.Value);

            if (string.IsNullOrEmpty(password))
            {
                Log.Information("Empty password field");
                e.Status = ValidationStatus.Error;
                passwordErrMsg = "Введите пароль";
                Log.Debug("Validate password error");
            }
            else
            {
                e.Status = ValidationStatus.Success;
                Log.Debug("Validate password success");
            }
        }
    }
}
