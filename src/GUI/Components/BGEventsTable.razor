@using Serilog;
@using BusinessLogic.Models

@inject NavigationManager NavigationManager
@inject BusinessLogic.Services.IBoardGameEventService BoardGameEventService 

<DataGrid TItem="EventView"
          Data="@viewEvents"
          PageSize="@PageSize"
          Editable="@Editable"
          CommandMode="DataGridCommandMode.ButtonRow"
          @bind-SelectedRow="@selectedEvent"
          ShowPager
          Sortable
          Striped
          Responsive
          RowClicked="@OnSelectedRowChange"
          >
    <DataGridColumns>
        <DataGridColumn Caption="Название" Editable >
            <DisplayTemplate>
                @{
                    var bgEvent = context as EventView;
                    var link = "/event/" + bgEvent?.ID.ToString();
                    var title = bgEvent?.Title;
                }
                <Link To="@link" TextColor="TextColor.Dark">@title</Link>
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(EventView.Date)" Caption="Дата" Editable />
        <DataGridColumn Field="@nameof(EventView.StartTimeView)" Caption="Начало" />
        <DataGridColumn Field="@nameof(EventView.DurationView)" Caption="Продолжительность" />
        <DataGridColumn Field="@nameof(EventView.Cost)" Caption="Стоимость"
                        DisplayFormat="{0:C0}" Editable />
        <DataGridColumn Field="@nameof(EventView.PurchaseView)" Caption="Покупки игр" Editable />
        <DataGridColumn Caption="Статус" Editable Sortable>
           <DisplayTemplate>
                @{
                    var view = context as EventView;
                    var color = view?.StateColor;
                    var name = view?.StateName;
                }
               <Badge Color="@color">@name</Badge>
            </DisplayTemplate>
        </DataGridColumn>
    </DataGridColumns>
    <ButtonRowTemplate>
        @if (Editable)
        {
            <Button Color="Color.Success" Clicked="@OnNewEventBtnClicked">Новая игротека</Button>
            <Button Color="Color.Primary" Clicked="@OnEditEventBtnClicked"
                    Disabled="@(selectedEvent is null)">Изменить</Button>
            <Button Color="Color.Danger" Clicked="@OnCancelEventBtnClicked"
                    Disabled="@(selectedEvent is null)">Отменить</Button>
        }
    </ButtonRowTemplate>
    <NextPageButtonTemplate><Icon Name="IconName.StepForward" /></NextPageButtonTemplate>
    <PreviousPageButtonTemplate><Icon Name="IconName.StepBackward" /></PreviousPageButtonTemplate>
    <LastPageButtonTemplate><Icon Name="IconName.Forward" /></LastPageButtonTemplate>
    <FirstPageButtonTemplate><Icon Name="IconName.Backward" /></FirstPageButtonTemplate>
    <TotalItemsTemplate><Badge Color="Color.Primary">Всего @context.TotalItems игротек</Badge></TotalItemsTemplate>
</DataGrid>

@if (ColorHint)
{
    <CardBody Flex="Flex.JustifyContent.Around">
        <Badge Color="Color.Warning">Запланирована</Badge>
        <Badge Color="Color.Success">Регистрация</Badge>
        <Badge Color="Color.Info">Скоро начнется</Badge>
        <Badge Color="Color.Secondary">Идет</Badge>
        <Badge Color="Color.Dark">Проведена</Badge>
        <Badge Color="Color.Danger">Отменена</Badge>
    </CardBody>
}

<EventModal Title="Новая игротека" @ref="@newEventModal"/>
<EventModal Title="Изменение информации об игротеке" EditMode=true
            @ref="@editEventModal" @bind-Event=@trueSelectedEvent/>

@code {
    [Parameter]
    public bool ColorHint { get; set; } = false;
    [Parameter]
    public List<BoardGameEvent> Events { get; set; } = new List<BoardGameEvent>();
    [Parameter]
    public int PageSize { get; set; } = 6;
    [Parameter]
    public bool Editable { get; set; } = false;

    private EventModal? newEventModal;
    private EventModal? editEventModal;

    private List<EventView> viewEvents = new List<EventView>();
    private EventView? selectedEvent;
    private BoardGameEvent? trueSelectedEvent;

    [Inject] private IMessageService MessageService { get; set; }

    protected override void OnInitialized()
    {
        Log.Information("BGEventsTable init");
        foreach(var bgEvent in Events)
        {
            viewEvents.Add(new EventView(bgEvent));
        }
        Log.Information("BGEventsTable init end");
        base.OnInitialized();
    }

    private void OnNewEventBtnClicked()
    {
        Log.Information("New event btn clicked");
        newEventModal?.Show();
    }

    private void OnEditEventBtnClicked()
    {
        Log.Information("Edit event btn clicked");
        editEventModal?.Show();
    }

    private void OnCancelEventBtnClicked()
    {
        Log.Information("Cancel event btn clicked");
        if (trueSelectedEvent is not null)
        {
            if (trueSelectedEvent.State == BoardGameEventState.Finished)
            {
                Log.Information("Event is finished");
                MessageService.Error("Нельзя отменить проведенную игротеку");
            }
            else
            {
                trueSelectedEvent.Cancelled = true;
                Log.Debug("Call BoardGameEventService.UpdateBoardGameEvent");
                BoardGameEventService.UpdateBoardGameEvent(trueSelectedEvent);
                NavigationManager.NavigateTo(NavigationManager.Uri, true);
            }
        }
    }

    private void OnSelectedRowChange(Blazorise.DataGrid.DataGridRowMouseEventArgs<EventView> args)
    {
        Log.Information("Events table row is selected");
        trueSelectedEvent = BoardGameEventService.GetBoardGameEventByID(args.Item?.ID ?? 0);
    }

}
