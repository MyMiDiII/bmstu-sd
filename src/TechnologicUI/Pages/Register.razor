@page "/register"

@inject NavigationManager NavigationManager
@inject BusinessLogic.Services.IUserService UserService

<Card Position="Position.Absolute.Top.Is50.Start.Is50.Translate.Middle" Width="Width.Is25">
    <CardBody>
        <Validations @ref="@regValidations" ValidateOnLoad=false>
            <Validation Validator="ValidateName">
                <Field>
                    <TextEdit @bind-Text="@registerRequest.Name" Placeholder="Имя пользователя">
                       <Feedback>
                            <ValidationNone></ValidationNone>
                            <ValidationSuccess></ValidationSuccess>
                            <ValidationError>Поле пустое, или пользователь с таким
                                             именем уже существует</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Field>
            </Validation>
            <Validation Validator="ValidatePassword">
                <Field>
                    <TextEdit @bind-Text="@registerRequest.Password" Placeholder="Пароль"
                              Role="TextRole.Password">
                       <Feedback>
                            <ValidationNone></ValidationNone>
                            <ValidationSuccess></ValidationSuccess>
                            <ValidationError>Придумайте пароль!</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Field>
            </Validation>
            <Validation @ref="@rePassValid" Validator="ValidateRePassword">
                <Field>
                    <TextEdit Placeholder="Подтверждение пароля" Role="TextRole.Password">
                       <Feedback>
                            <ValidationNone></ValidationNone>
                            <ValidationSuccess></ValidationSuccess>
                            <ValidationError>Пароли не совпадают!</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Field>
            </Validation>
        </Validations>
        <Button Color="Color.Primary" Clicked="@OnRegisterClicked" Block>Регистрация</Button>
    </CardBody>
</Card>

@code {
    RegisterRequest registerRequest = new RegisterRequest();
    Validations? regValidations;
    Validation? rePassValid;

    async Task OnRegisterClicked()
    {
        if ( await regValidations.ValidateAll() )
        {
            UserService.Register(registerRequest);
            UserService.Login(new LoginRequest(registerRequest.Name, registerRequest.Password));
            NavigationManager.NavigateTo("events", true);

            await regValidations.ClearAll();
        }
    }

    void ValidateName(ValidatorEventArgs e)
    {
        var name = Convert.ToString(e.Value);

        e.Status = !string.IsNullOrEmpty(name) && UserService.GetUserByName(name) is null
                   ? ValidationStatus.Success : ValidationStatus.Error;
    }

    void ValidatePassword(ValidatorEventArgs e)
    {
        var password = Convert.ToString(e.Value);

        e.Status = !string.IsNullOrEmpty(password) ? ValidationStatus.Success : ValidationStatus.Error;
        rePassValid?.Validate();
    }

    void ValidateRePassword(ValidatorEventArgs e)
    {
        var rePassword = Convert.ToString(e.Value);

        e.Status = string.IsNullOrEmpty(rePassword) ? ValidationStatus.None :
                   rePassword == registerRequest.Password ? ValidationStatus.Success :
                   ValidationStatus.Error;
    }
}
